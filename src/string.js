// Generated by CoffeeScript 1.6.3
/*

Much of this code and all of the good ideas were taken from the Sugar JS library
Copyright (c) Andrew Plummer, http://sugarjs.com/

Modifications Copyright(c) Gustavo Duarte
*/


(function() {
  var F, delimiters, i, rgxStripHtml, self, _,
    __slice = [].slice;

  if ((typeof require !== "undefined" && require !== null)) {
    _ = require('underscore');
    F = require('./index');
    i = require('../inflector');
  } else {
    F = this.F, _ = this._;
    i = F.inflector;
  }

  delimiters = ["''", '""', '{}', '[]', '()'];

  rgxStripHtml = /<(?:.|\n)*?>/gm;

  self = {
    delimiters: delimiters,
    toPlural: function(s) {
      return i.inflect(s, true);
    },
    toSingular: function(s) {
      return i.inflect(s, false);
    },
    /*
     * @method underscore()
     * @short Converts hyphens and camel casing to underscores.
    */

    underscore: function(s) {
      return s.replace(/[-\s]+/g, '_').replace(i.acronymRegExp, function(fullMatch, acronym, index) {
        return (index > 0 ? '_' : '') + acronym.toLowerCase();
      }).replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').toLowerCase();
    },
    spacify: function(s) {
      return self.underscore(s).replace(/_/g, ' ');
    },
    toCamelCase: function(s, first) {
      return self.underscore(s).replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
        var acronym, toUpperInitial;
        acronym = i.acronyms[word];
        toUpperInitial = first !== false || index > 0;
        if (acronym) {
          if (toUpperInitial) {
            return acronym;
          } else {
            return acronym.toLowerCase();
          }
        }
        if (toUpperInitial) {
          return F.toUpperInitial(word);
        } else {
          return word;
        }
      });
    },
    tryUpper: function(s) {
      if (_.isString(s)) {
        return s.toUpperCase();
      } else {
        return s;
      }
    },
    tryLower: function(s) {
      if (_.isString(s)) {
        return s.toLowerCase();
      } else {
        return s;
      }
    },
    toUpperInitial: function(s) {
      var c;
      c = s.charAt(0).toUpperCase();
      if (s.length === 1) {
        return c;
      } else {
        return c + s.slice(1);
      }
    },
    toLowerInitial: function(s) {
      var c;
      c = s.charAt(0).toLowerCase();
      if (s.length === 1) {
        return c;
      } else {
        return c + s.slice(1);
      }
    },
    undelimit: function() {
      var args, d, pairs, s, _i, _len;
      s = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      pairs = args.length > 0 ? args : delimiters;
      for (_i = 0, _len = pairs.length; _i < _len; _i++) {
        d = pairs[_i];
        if (s.charAt(0) === d.charAt(0) && s.charAt(s.length - 1) === d.charAt(1)) {
          return s.slice(1, s.length - 1);
        }
      }
      return s;
    },
    stripHtml: function(s) {
      F.demandString(s, "s");
      return s.replace(rgxStripHtml, '');
    },
    repeat: function(str, n) {
      return Array(n + 1).join(str);
    },
    padLeft: function(s, length, pad) {
      if (pad == null) {
        pad = ' ';
      }
      s = s.toString();
      if (s.length >= length) {
        return s;
      }
      return self.repeat(pad, length - s.length) + s;
    },
    endsWith: function(str, suffix) {
      F.demandGoodString(str, 'str');
      F.demandGoodString(suffix, 'suffix');
      return str.indexOf(suffix, str.length - suffix.length) !== -1;
    },
    startsWith: function(str, prefix) {
      F.demandGoodString(str, 'str');
      F.demandGoodString(prefix, 'prefix');
      return str.slice(0, prefix.length) === prefix;
    },
    alike: function(a, b) {
      if (a == null) {
        a = '';
      }
      if (b == null) {
        b = '';
      }
      F.demandString(a, 'a');
      F.demandString(b, 'b');
      a = a.toLowerCase().trim();
      b = b.toLowerCase().trim();
      return a === b;
    }
  };

  if (((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null)) {
    module.exports = self;
  } else {
    _.extend(this.F, self);
  }

}).call(this);
